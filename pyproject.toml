[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pylocalpmanager"
requires-python = ">=3.12"
dynamic = ['version']
dependencies    = [
  "apscheduler==3.10.4",
  "colorlog==6.8.2",
  "fastapi==0.111.1",
  "lxml==5.2.2",
  "openpyxl==3.1.5",
  "pandas==2.2.2",
  "pyarrow==16.1.0",
  "pydantic-settings==2.3.4",
  "requests==2.32.3",
  "strawberry_graphql[debug-server]==0.235.2",
  "uvicorn[standard]==0.30.1",
]

[project.optional-dependencies]
test = [
  "coverage-threshold==0.4.4",
  "httpx==0.27.0",
  "mypy==1.10.1",
  "pre-commit==3.7.1",
  "pylint==3.2.5",
  "pytest==8.2.0",
  "pytest-asyncio==0.23.6",
  "pytest-cov==5.0.0",
  "pytest-freezer==0.4.8",
  "pytest-profiling==1.7.0",
  "pytest-timeout==2.3.1",
  "ruff==0.5.2",
  "types_PyYAML==6.0.12.20240311",
  "types_requests==2.32.0.20240712",
]

[tool.setuptools]
platforms = ["any"]
zip-safe = false

[tool.setuptools.dynamic]
version = {file = "pypmanager/VERSION"}

[tool.setuptools.packages.find]
exclude = ["tests", "tests*"]

[tool.pytest.ini_options]
filterwarnings = [
    "ignore:'typing.ByteString' is deprecated and slated for removal in Python 3.14",
]

[tool.pylint.MASTER]
py-version = "3.12"
ignore = [
    "tests",
]
# Use a conservative default here; 2 should speed up most setups and not hurt
# any too bad. Override on command line as appropriate.
jobs = 2
load-plugins = [
    "pylint.extensions.code_style",
    "pylint.extensions.typing",
]
persistent = false

extension-pkg-whitelist = "pydantic"

[tool.pylint.BASIC]
good-names = [
    "_",
    "df", # DataFrame
    "i",
    "j",
]

[tool.pylint.REPORTS]
score = false

[tool.pylint.TYPECHECK]
ignored-classes = [
    "_CountingAttr",  # for attrs
]
mixin-class-rgx = ".*[Mm]ix[Ii]n"

[tool.pylint.FORMAT]
expected-line-ending-format = "LF"

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines = '^\s*(# )?<?https?://\S+>?$'

[tool.pylint."MESSAGES CONTROL"]
disable = [
  "too-few-public-methods",
  "logging-fstring-interpolation",
  "too-many-statements",
  "too-many-locals",
  "too-many-branches",
  "too-many-public-methods",
  "too-many-instance-attributes",
]

[tool.mypy]
python_version = "3.12"
show_error_codes = true
follow_imports = "silent"
ignore_missing_imports = true
strict_equality = true
warn_incomplete_stub = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_return_any = true
warn_unreachable = true
strict = true

plugins = "pydantic.mypy"

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.ruff]
exclude = []

target-version = "py312"

lint.select = [
  "ALL"
]

line-length = 88

lint.ignore = [# One of these is to be disabled..
          "D213", # See https://github.com/charliermarsh/ruff/issues/2281
          #"D212", # See https://github.com/charliermarsh/ruff/issues/2281

          "D203", # See https://github.com/charliermarsh/ruff/issues/2281
          #"D211", # See https://github.com/charliermarsh/ruff/issues/2281

          "ISC001",  # Recommended disable
          "G004",  # Logging statement uses f-string
          "COM812",  # Trailing comma missing
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.pydocstyle]
convention = 'pep257'

[tool.ruff.lint.isort]
# will group `import x` and `from x import` of the same module.
combine-as-imports = true
force-sort-within-sections = true
forced-separate = [
  "tests",
]
known-first-party = [
  "pypmanager",
  "tests",
]

[tool.ruff.lint.per-file-ignores]


"tests/*" = [
 "S101",  # Use of `assert` detected
 "PLR2004",  # Magic value used in comparison, consider replacing with a constant variable
]

[tool.coverage.run]
branch = true

source = ['pypmanager']

relative_files = true

omit = [
  "const.py",  # We can ignore all constants
  "__main__.py",
  "pypmanager/__init__.py",
  "pypmanager/error.py",
  "pypmanager/analytics/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # TYPE_CHECKING and @overload blocks are never executed during pytest run
    "if TYPE_CHECKING:",
    "@overload",
]

[coverage-threshold]
line_coverage_min = 70
file_line_coverage_min = 70

[coverage-threshold.modules."pypmanager/ingest/transaction/pandas_algorithm.py"]
line_coverage_min = 199
file_line_coverage_min = 100

[coverage-threshold.modules."pypmanager/general_ledger/pandas_algorithm.py"]
line_coverage_min = 199
file_line_coverage_min = 100

[coverage-threshold.modules."pypmanager/analytics/security.py"]
line_coverage_min = 70
file_line_coverage_min = 29

[coverage-threshold.modules."pypmanager/analytics/holding.py"]
line_coverage_min = 70
file_line_coverage_min = 56

[coverage-threshold.modules."pypmanager/general_ledger/shared.py"]
line_coverage_min = 70
file_line_coverage_min = 0

[coverage-threshold.modules."pypmanager/general_ledger/transaction_macro.py"]
line_coverage_min = 70
file_line_coverage_min = 0

[coverage-threshold.modules."pypmanager/ingest/market_data/ft.py"]
line_coverage_min = 55
file_line_coverage_min = 0

[coverage-threshold.modules."pypmanager/ingest/market_data/helpers.py"]
line_coverage_min = 35
file_line_coverage_min = 0

[coverage-threshold.modules."pypmanager/ingest/market_data/morningstar.py"]
line_coverage_min = 57
file_line_coverage_min = 0
